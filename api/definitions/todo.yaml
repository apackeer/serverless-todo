swagger: '2.0'
info:
  title: Sample TODO API
  description: A simple TODO API using API Gateway and Lambda
  version: "1.0"
schemes:
  - https
produces:
  - application/json
paths:
  /todos:
      get:
        summary: List todos
        description: Returns all todos
        x-amazon-apigateway-auth:
          type: aws_iam
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: todoId
            in: path
            description: The unique identifier for a todo
            type: string
          - name: "search"
            in: "query"
            required: false
            type: "string"
        x-amazon-apigateway-integration:
          type: aws
          uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-get-todos/invocations
          credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
#          credentials: arn:aws:iam::*:user/*
          httpMethod: POST
          requestTemplates:
            application/json: |
              {
                "userId" : "$context.identity.cognitoIdentityId",
                "search" : "$input.params('search')"
              }
          responses:
            "default":
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
            "Bad Request:.*":
              statusCode: "400"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
            "Internal Failure:.*":
              statusCode: "500"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
        responses:
          200:
            description: ListTodosResponse
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/Todos'
          400:
            description: Bad request
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/Error'
          500:
            description: Internal failure
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/Error'
      post:
        summary: Create a new todo
        description: |
          Creates a new todo
        x-amazon-apigateway-auth:
          type: aws_iam
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: todo
            in: body
            description: New todo details
            schema:
              $ref: '#/definitions/Todo'
        x-amazon-apigateway-integration:
          type: aws
          uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-create-todo/invocations
          credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
          httpMethod: POST
          requestTemplates:
            application/json: |
              {
                "userId" : "$context.identity.cognitoIdentityId",
                "todo" : $input.json('$')
              }
          responses:
            "default":
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
            "Bad Request:.*":
              statusCode: "400"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
            "Internal Failure:.*":
              statusCode: "500"
              responseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"
        responses:
          200:
            description: CreateTodoResponse
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/CreateTodoResponse'
          400:
            description: Bad request
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/Error'
          500:
            description: Internal error
            headers:
              Access-Control-Allow-Origin:
                type: "string"
            schema:
              $ref: '#/definitions/Error'
      options:
        summary: CORS support
        description: |
          Enable CORS by returning correct headers
        consumes:
          - application/json
        produces:
          - application/json
        tags:
          - CORS
        x-amazon-apigateway-integration:
          type: mock
          requestTemplates:
            application/json: |
              {
                "statusCode" : 200
              }
          responses:
            "default":
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
                method.response.header.Access-Control-Allow-Methods : "'*'"
                method.response.header.Access-Control-Allow-Origin : "'*'"
              responseTemplates:
                application/json: |
                  {}
        responses:
          200:
            description: Default response for CORS method
            headers:
              Access-Control-Allow-Headers:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Origin:
                type: "string"
  /todos/{todoId}:
    get:
      summary: Get todo by id
      description: Returns a todo based on the given id
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: todoId
          in: path
          description: The unique identifier for a todo
          type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-get-todo/invocations
#        credentials: arn:aws:iam::*:user/*
        credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "userId" : "$context.identity.cognitoIdentityId"
              "todoId" : "$input.params('todoId')"
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Bad Request:.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Internal Failure:.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
      responses:
        200:
          description: A todo
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Todo'
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
  /login:
    post:
      summary: Login user
      description: |
        Verifies the given credentials against the user database and returns a set
        of new temporary credentials
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: LoginUser
          in: body
          description: New user details.
          schema:
            $ref: '#/definitions/User'
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-login/invocations
        credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "action" : "com.amazonaws.apigatewaydemo.action.LoginDemoAction",
              "body" : $input.json('$')
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Bad Request:.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Internal Failure:.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
      responses:
        200:
          description: A new set of temporary credentials
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/LoginUserResponse'
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
  /users:
    post:
      summary: Creates a new user
      description: |
        Creates a new user
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: User
          in: body
          description: New user details
          schema:
            $ref: '#/definitions/User'
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-create-user/invocations
#        credentials: arn:aws:iam::*:user/*
        credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "body" : $input.json('$')
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Bad Request:.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Internal Failure:.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
      responses:
        200:
          description: Create user response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/CreateUserResponse'
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: List users
      description: Retrieve a list of users
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
        - application/json
      produces:
        - application/json
      x-amazon-apigateway-integration:
        type: aws
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:ACCOUNT_ID:function:serverless-todo-get-users/invocations
#        credentials: arn:aws:iam::*:user/*
        credentials: arn:aws:iam::ACCOUNT_ID:role/serverless-todo-lambda-invocation-role
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "body" : $input.json('$')
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Bad Request:.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "Internal Failure: .*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
      responses:
        200:
          description: ListUsersResponse
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Users'
        400:
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
definitions:
  Users:
    type: array
    items:
      $ref: User
  User:
    properties:
      username:
        type: string
        description: A unique username for the user
      password:
        type: string
        description: A password for the new user

  CreateUserResponse:
    properties:
      username:
        type: string
        description: The username of the new user
      identityId:
        type: string
        description: The unique identifier for the new user
      token:
        type: string
        description: An OpenID token for the new user
      credentials:
        properties:
          accessKey:
            type: string
            description: Temporary access key to sign requests
          secretKey:
            type: string
            description: Temporary secret access key to sign requests
          sessionToken:
            type: string
            description: Tempoarary session token
          expiration:
            type: integer
            description: |
              Expiration date of the temporary credentials in millis since 1/1/1970
  LoginUserResponse:
    properties:
      identityId:
        type: string
        description: The unique identifier for the new user
      token:
        type: string
        description: An OpenID token for the new user
      credentials:
        properties:
          accessKey:
            type: string
            description: Temporary access key to sign requests
          secretKey:
            type: string
            description: Temporary secret access key to sign requests
          sessionToken:
            type: string
            description: Tempoarary session token
          expiration:
            type: integer
            description: |
              Expiration date of the temporary credentials in millis since 1/1/1970
  User:
    properties:
      userId:
        type: string
      userName:
        type: string
  Todo:
    properties:
      todoId:
        type: string
      name:
        type: string
      description:
        type: string
  Todos:
    type: array
    items:
      $ref: Todo
  CreateTodoResponse:
      type: object
      properties:
        todo:
          $ref: Todo
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
